#!/usr/bin/env node

/**
 * ÊµãËØïÂêéÁ´ØÊñ∞ÁöÑunit_statisticsÊï∞ÊçÆÁªìÊûÑ
 */

import http from 'http';

function makeRequest(method, path, data = null) {
  return new Promise((resolve, reject) => {
    const options = {
      hostname: 'localhost',
      port: 5000,
      path: path,
      method: method,
      headers: {
        'Content-Type': 'application/json',
        'Accept': 'application/json'
      }
    };

    const req = http.request(options, (res) => {
      let body = '';
      res.on('data', (chunk) => {
        body += chunk;
      });
      res.on('end', () => {
        try {
          const response = JSON.parse(body);
          resolve({ status: res.statusCode, data: response });
        } catch (error) {
          resolve({ status: res.statusCode, data: body });
        }
      });
    });

    req.on('error', (error) => {
      reject(error);
    });

    if (data) {
      req.write(JSON.stringify(data));
    }
    req.end();
  });
}

async function testUnitStats() {
  console.log('üè¢ ÊµãËØï‰∫åÁ∫ßÂçï‰ΩçÁªüËÆ°Êï∞ÊçÆÁªìÊûÑ...\n');

  try {
    const response = await makeRequest('POST', '/api/v1/data-search/search', {
      company: 'ÂõΩÁΩë',
      page: 1,
      limit: 10
    });
    
    if (response.status === 200) {
      const data = response.data;
      
      console.log('‚úÖ APIÂìçÂ∫îÊàêÂäü');
      console.log('üìä ÊÄªËÆ∞ÂΩïÊï∞:', data.total_records);
      
      // Ê£ÄÊü•Êñ∞ÁöÑunit_statisticsÊï∞ÊçÆÁªìÊûÑ
      if (data.unit_statistics) {
        console.log('\nüè¢ ‰∫åÁ∫ßÂçï‰ΩçÁªüËÆ°Êï∞ÊçÆÁªìÊûÑ:');
        console.log('ÂèØÁî®ÊÄß:', data.unit_statistics.available);
        console.log('Ë¶ÜÁõñÂçï‰ΩçÊï∞:', data.unit_statistics.covered_units);
        console.log('ÊÄªÂçï‰ΩçÊï∞:', data.unit_statistics.total_units);
        
        if (data.unit_statistics.units && data.unit_statistics.units.length > 0) {
          console.log('\nüìä Âçï‰ΩçËØ¶ÁªÜ‰ø°ÊÅØ (Ââç5‰∏™):');
          data.unit_statistics.units.slice(0, 5).forEach((unit, i) => {
            console.log(`\n${i + 1}. ${unit.unit_name}`);
            console.log(`   Âú∞Âå∫: ${unit.region}`);
            console.log(`   ÂΩïÂèñ‰∫∫Êï∞: ${unit.recruitment_count}`);
            console.log(`   Âç†ÊØî: ${unit.percentage?.toFixed(2) || 'N/A'}%`);
          });
          
          console.log(`\nüìà Âçï‰ΩçÁªüËÆ°Top 10:`);
          const top10 = data.unit_statistics.units
            .sort((a, b) => b.recruitment_count - a.recruitment_count)
            .slice(0, 10);
            
          top10.forEach((unit, i) => {
            console.log(`   ${i + 1}. ${unit.unit_name} (${unit.region}) - ${unit.recruitment_count}‰∫∫ (${unit.percentage?.toFixed(2) || 'N/A'}%)`);
          });
        }
      } else {
        console.log('‚ùå Êú™ÊâæÂà∞ unit_statistics Êï∞ÊçÆ');
        
        // Ê£ÄÊü•ÊòØÂê¶ËøòÊúâÊóßÁöÑÊï∞ÊçÆÁªìÊûÑ
        console.log('\nüîç Ê£ÄÊü•ÂÖ∂‰ªñÁõ∏ÂÖ≥Êï∞ÊçÆÂ≠óÊÆµ:');
        console.log('company_distribution Â≠òÂú®:', !!data.statistics?.company_distribution);
        console.log('school_statistics Â≠òÂú®:', !!data.school_statistics);
        
        if (data.statistics?.company_distribution) {
          console.log('\nüè¢ ÂÖ¨Âè∏ÂàÜÂ∏ÉÊï∞ÊçÆ (ÊóßÁªìÊûÑ):');
          Object.entries(data.statistics.company_distribution).forEach(([company, count]) => {
            console.log(`   ${company}: ${count}‰∫∫`);
          });
        }
      }
    } else {
      console.log(`‚ùå APIÂ§±Ë¥•: ${JSON.stringify(response.data)}`);
    }
  } catch (error) {
    console.log(`‚ùå ËØ∑Ê±ÇÂ§±Ë¥•: ${error.message}`);
  }
}

testUnitStats().catch(console.error);